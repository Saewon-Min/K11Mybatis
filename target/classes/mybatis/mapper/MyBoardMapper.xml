<?xml version="1.0" encoding="UTF-8"?>

<!-- 해당 xml파일이 mapper역할을 하기 위해서 반드시 필요한 DOCTYPE -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	mapper(매퍼)
	
	[namespace속성]
		: 해당 mapper파일을 호출하기 위해 정의한 인터페이스의
		패키지를 포함한 풀 경로를 기술한다. 해당 인터페이스는
		컨트롤러와 Mapper(DAO) 사이에서 중재자 역할을 하는
		서비스 객체로 사용된다. 
		
	[id속성]
		: 실제 호출되는 함수명과 동일한 이름으로 기술한다.
		
	[resultType]
		: 쿼리 실행 후 반환되는 값의 타입을 명시한다.
		이때는 패키지명 포함한 풀 경로를 기술해야 한다.	
		
	[parameterType]
		: 쿼리문에서 사용할 파라미터를 저장한 DTO 혹은 VO객체의
		타입을 명시한다. 패키지명을 포함한 풀 경로를 기술해야 한다.
-->
<!--  
Mapper에서의 파라미터 사용법

형식1]
	listPage(int s, int e ) 와 같이 추상메소드를 통해
	파라미터가 전달되면 순서대로 param1, param2로 사용할 수 있다.
	
형식2]
	인덱스를 사용하는 방법
	순서대로 0부터 시작한다.
	샾{0} , 샾{1} , ... 

형식3]
	@Param 어노테이션을 사용하는 방법
	@Param(_변수명 String 변수명) => mapper에서는 _변수명으로
	사용 할 수 있다.
	
형식4]
	DTO와 같은 객체를 사용하는 방법
-->
<!--  
각 엘리먼트 별 반환값

select
	: select문에 해당하는 결과를 반환한다. 아래와 같이 int인
	경우는 정수값을, DTO객체인 경우에는 해당 레코드를 저장한
	List계열의 컬렉션으로 반환된다.
	
insert
	: 입력 성공시 1, 실패시 0을 반환한다. 만약 insert가 여러번
	되더라도 성공시에는 1을 반환한다.
	
update/delete
	: 수정, 삭제에 성공한 행의 개수가 반환된다. 조건에 따라
	여러개의 레코드가 한꺼번에 적용될 수 있으므로 0,1이 아닌
	더 큰 값이 반환될수도 있다. 실패의 경우 0이 반환된다.

-->

<mapper namespace="mybatis.MybatisDAOImpl"><!-- 인터페이스의 위치(패키지명을 포함한 풀 경로) -->

	<!-- id는 메소드명과 똑같다 -->

	
<!-- 	
	********************  1차버전 : 검색 없는 부분  *************************
	<select id="getTotalCount" resultType="int">
		SELECT COUNT(*) FROM myboard

	</select>

	<select id="listPage" resultType="mybatis.MyBoardDTO">
		SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM(
				SELECT * FROM myboard ORDER BY idx DESC
			) Tb
		)
		WHERE rNum BETWEEN #{start} AND #{end}
	</select> -->
	
	
	
	<!-- ****************  2차버전 : 단순 검색 하는 부분  ************************** -->
	<!-- 
		검색어 처리
			: 검색어가 있는 경우 동적으로 쿼리문을 변경해야 하므로
			동적쿼리를 위해 <if태그를 사용한다. JSTL과 사용법이 동일하다.
	 -->
	<!-- <select id="getTotalCount" resultType="int"
		parameterType="mybatis.ParameterDTO">
		SELECT COUNT(*) FROM myboard
		<if test="searchTxt!=null and !searchTxt.equals('')">
			WHERE ${searchField} LIKE '%'||#{searchTxt}||'%'
		</if>
	</select>

	<select id="listPage" resultType="mybatis.MyBoardDTO"
		parameterType="mybatis.ParameterDTO">
		SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM(
				SELECT * FROM myboard 
				<if test="searchTxt!=null and !searchTxt.equals('')">
					WHERE ${searchField} LIKE '%'||#{searchTxt}||'%'						
				</if>
				
				ORDER BY idx DESC
			) Tb
		)
		WHERE rNum<![CDATA[>=]]>#{start} AND rNum<![CDATA[<=]]>#{end};
	</select>  -->
	<!--  
		CDATA 
			: Unparsed Character Data. 
			파싱되지 않은 문자 데이터를 의미하는 용어로
			Mapper에서는 꺽쇄로 시작되는 모든 문자를 엘리먼트(태그)로
			판단하기 때문에 쿼리문 사이에 비교 연산자를 사용할때는
			반드시 위와 같이 처리해야 한다.
	-->
	<!-- WHERE rNum BETWEEN #{start} AND #{end} -->
	<!-- WHERE rNum<![CDATA[>=]]>#{start} AND rNum<![CDATA[<=]]>#{end}; -->
	
	
	<!-- 3차버전 : 여러 단어 검색 처리 -->
	<!--  
		반복을 통해 동적쿼리를 만들때는 foreach태그를 사용한다.
		
		collection 
			: 반복에 사용할 컬렉션 객체
		item
			: 반복시 사용할 변수
		open
			: 동적 쿼리문의 시작 부분
		close
			: 동적 쿼리문의 종료 부분
		separator
			: 반복할 때 사용할 구분자로 and, or, 콤마 등을 
			사용할 수 있다.	(콤마는 in절을 쓸때 사용함)
			
		아래의 쿼리문에 in절을 쓴다면
		if test="searchTxt!=null"
			WHERE ${searchField} LIKE 
			foreach collection="searchTxt" item="str" open="(" close=")"
				separator=","
				#{str}
			foreach
		if
		
		이런식으로 사용할것
			
	-->
   <select id="getTotalCount" resultType="int"
		parameterType="mybatis.ParameterDTO">
		SELECT COUNT(*) FROM myboard
		<if test="searchTxt!=null">
			WHERE 
			<foreach collection="searchTxt" item="str" open="(" close=")"
				separator="or">
				${searchField} LIKE '%'||#{str}||'%'
			</foreach>
		</if>
	</select>

	<select id="listPage" resultType="mybatis.MyBoardDTO"
		parameterType="mybatis.ParameterDTO">
		SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM(
				SELECT * FROM myboard 
				<if test="searchTxt!=null">
					WHERE 
					<foreach collection="searchTxt" item="str" open="(" close=")"
						separator="or">
						${searchField} LIKE '%'||#{str}||'%'						
					</foreach>
				</if>
				
				ORDER BY idx DESC
			) Tb
		)
		WHERE rNum BETWEEN #{start} AND #{end}
	</select>   
	
	
	
	
	
	
	

	<!--  
	@Param 어노테이션에서 지정한 명칭을 사용하여 인파라미터를
	처리한다.
	일련번호는 기존 방식과 동일하게 시퀀스를 통해 부여한다.
	-->
	<insert id="write">
		INSERT INTO myboard (idx, id, name, contents) 
		VALUES
		(myboard_seq.nextval, #{_id} ,#{_name},#{_contents}  )
	
	</insert>



	<!--  
		매개변수로 전달된 DTO객체의 멤버변수명만 명시하면
		내부적으로 getter()가 호출되어 값을 얻어올 수 있다.
		(EL과 동일하다)
	-->
	<select id="view" resultType="mybatis.MyBoardDTO"
		parameterType="mybatis.ParameterDTO">
		SELECT * FROM myboard WHERE idx=#{board_idx} AND id=#{user_id}	
	</select>

	<!-- 게시물 수정하기 -->
	<update id="modify" parameterType="mybatis.MyBoardDTO">
		UPDATE myboard
		SET name=#{name} , contents=#{contents}
		WHERE idx=#{idx} AND id=#{id}
	
	</update>



	<!-- 게시물 삭제하기 -->
	<delete id="delete">
		DELETE FROM myboard WHERE idx=#{param1} AND id=#{param2}
	</delete>



	<!-- 둘 다 됨 : java.util.Map 또는 map -->
	<!-- <select id="hashMapUse" resultType="mybatis.MyBoardDTO"
		parameterType="map"> -->
	<select id="hashMapUse" resultType="mybatis.MyBoardDTO"
		parameterType="java.util.Map">
		SELECT * FROM myboard
		WHERE id=#{key_id} or name=#{key_name} or contents like '%'||#{key_contents}||'%'
 		ORDER BY idx DESC	
	</select>
	<!-- 
		컨트롤러에서 저장한 값
		hashMap.put("key_id", "kosmo");
		hashMap.put("key_name", "코스모"); 
		hashMap.put("key_contents", "룰루");
	-->
	
	
	
	
	<!-- 둘 다 됨 : java.util.ArrayList 또는 list -->
	<!-- <select id="arrayListUse" resultType="mybatis.MyBoardDTO"
		parameterType="list"> -->
	<select id="arrayListUse" resultType="mybatis.MyBoardDTO"
		parameterType="java.util.ArrayList">
		SELECT * FROM myboard
		WHERE 
		<!-- 리스트의 경우 collection="list" 와 같이 파라미터 명을
		list라고 쓰기로 결정되어있다. -->
		<foreach collection="list" item="item" index="index"
			open="(" close=")" separator="or">
			name=#{item}	
		</foreach>
 		ORDER BY idx DESC	
	</select>
	<!--  
		위의 <foreach 태그를 통해 아래와 같은 쿼리가 만들어진다.
		(
			name='옹성우' or name='김선우' or name='김선호' or ...
		)
	-->






</mapper>



















